// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id
  email         String         @unique
  name          String?
  preferences   String[]
  events        Event[]        @relation("Organizer")
  registrations Registration[]
  createdAt     DateTime       @default(now())

  chats Chat[]

  Messages Messages[]
}

model Event {
  id            String         @id @default(uuid())
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime?
  organizer     User           @relation("Organizer", fields: [organizerId], references: [id])
  organizerId   String
  tags          String[]
  registrations Registration[]
  createdAt     DateTime       @default(now())

  chat Chat[]
}

model Registration {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Chat {
  id        String     @id @default(uuid())
  event   Event?   @relation(fields: [eventId], references: [id])
  users     User[]
  messages  Messages[]
  eventId String? @unique
}

model Messages {
  id        String   @id @default(uuid())
  message   String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    String
  timestamp DateTime @default(now())
}